{"version":3,"sources":["../../src/utils/websocket-manager.ts"],"names":["getPageData","pagePath","state","store","getState","publicDir","path","join","program","directory","result","id","undefined","page","pageData","err","Error","getStaticQueryData","staticQueryId","filePath","fs","pathExists","fileResult","readJson","hashPaths","paths","map","update","digest","WebsocketManager","activePaths","Set","clients","errors","Map","pageResults","staticQueryResults","init","server","websocket","pingTimeout","updateServerActivePaths","serverActivePaths","client","activePath","add","on","socket","clientInfo","setActivePath","newActivePath","fallbackTo404","activePagePath","handshake","headers","referer","url","parse","forEach","message","errorID","send","type","payload","getDataForPath","why","get","set","console","log","staticQueryHashes","Promise","all","queryId","staticQueryResult","size","telemetry","trackCli","siteMeasurements","clientsCount","Array","from","debounce","delete","_path","getSocket","emitStaticQueryData","data","emitPageData","emitError","websocketManager"],"mappings":"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","sourcesContent":["/* eslint-disable no-invalid-this */\nimport path from \"path\"\nimport { store } from \"../redux\"\nimport { Server as HTTPSServer } from \"https\"\nimport { Server as HTTPServer } from \"http\"\nimport fs from \"fs-extra\"\nimport { readPageData, IPageDataWithQueryResult } from \"../utils/page-data\"\nimport telemetry from \"gatsby-telemetry\"\nimport url from \"url\"\nimport { createHash } from \"crypto\"\nimport { findPageByPath } from \"./find-page-by-path\"\nimport socketIO from \"socket.io\"\n\nexport interface IPageQueryResult {\n  id: string\n  result?: IPageDataWithQueryResult\n}\n\nexport interface IStaticQueryResult {\n  id: string\n  result: unknown // TODO: Improve this once we understand what the type is\n}\n\ntype PageResultsMap = Map<string, IPageQueryResult>\ntype QueryResultsMap = Map<string, IStaticQueryResult>\n\n/**\n * Get page query result for given page path.\n * @param {string} pagePath Path to a page.\n */\nasync function getPageData(pagePath: string): Promise<IPageQueryResult> {\n  const state = store.getState()\n  const publicDir = path.join(state.program.directory, `public`)\n\n  const result: IPageQueryResult = {\n    id: pagePath,\n    result: undefined,\n  }\n\n  const page = findPageByPath(state, pagePath)\n  if (page) {\n    result.id = page.path\n    try {\n      const pageData: IPageDataWithQueryResult = await readPageData(\n        publicDir,\n        page.path\n      )\n\n      result.result = pageData\n    } catch (err) {\n      throw new Error(\n        `Error loading a result for the page query in \"${pagePath}\". Query was not run and no cached result was found.`\n      )\n    }\n  }\n\n  return result\n}\n\n/**\n * Get page query result for given page path.\n * @param {string} pagePath Path to a page.\n */\nasync function getStaticQueryData(\n  staticQueryId: string\n): Promise<IStaticQueryResult> {\n  const { program } = store.getState()\n  const publicDir = path.join(program.directory, `public`)\n\n  const filePath = path.join(\n    publicDir,\n    `page-data`,\n    `sq`,\n    `d`,\n    `${staticQueryId}.json`\n  )\n\n  const result: IStaticQueryResult = {\n    id: staticQueryId,\n    result: undefined,\n  }\n  if (await fs.pathExists(filePath)) {\n    try {\n      const fileResult = await fs.readJson(filePath)\n\n      result.result = fileResult\n    } catch (err) {\n      // ignore errors\n    }\n  }\n\n  return result\n}\n\nfunction hashPaths(paths: Array<string>): Array<string> {\n  return paths.map(path => createHash(`sha256`).update(path).digest(`hex`))\n}\n\ninterface IClientInfo {\n  activePath: string | null\n  socket: socketIO.Socket\n}\n\nexport class WebsocketManager {\n  activePaths: Set<string> = new Set()\n  clients: Set<IClientInfo> = new Set()\n  errors: Map<string, string> = new Map()\n  pageResults: PageResultsMap = new Map()\n  staticQueryResults: QueryResultsMap = new Map()\n  websocket: socketIO.Server | undefined\n\n  init = ({\n    server,\n  }: {\n    server: HTTPSServer | HTTPServer\n  }): socketIO.Server => {\n    this.websocket = socketIO(server, {\n      // we see ping-pong timeouts on gatsby-cloud when socket.io is running for a while\n      // increasing it should help\n      // @see https://github.com/socketio/socket.io/issues/3259#issuecomment-448058937\n      pingTimeout: 30000,\n    })\n\n    const updateServerActivePaths = (): void => {\n      const serverActivePaths = new Set<string>()\n      for (const client of this.clients) {\n        if (client.activePath) {\n          serverActivePaths.add(client.activePath)\n        }\n      }\n      this.activePaths = serverActivePaths\n    }\n\n    this.websocket.on(`connection`, socket => {\n      const clientInfo: IClientInfo = {\n        activePath: null,\n        socket,\n      }\n      this.clients.add(clientInfo)\n\n      const setActivePath = (\n        newActivePath: string | null,\n        fallbackTo404: boolean = false\n      ): void => {\n        let activePagePath: string | null = null\n        if (newActivePath) {\n          const page = findPageByPath(\n            store.getState(),\n            newActivePath,\n            fallbackTo404\n          )\n          if (page) {\n            activePagePath = page.path\n          }\n        }\n        clientInfo.activePath = activePagePath\n        updateServerActivePaths()\n      }\n\n      if (socket?.handshake?.headers?.referer) {\n        const path = url.parse(socket.handshake.headers.referer).path\n        setActivePath(path, true)\n      }\n\n      this.errors.forEach((message, errorID) => {\n        socket.send({\n          type: `overlayError`,\n          payload: {\n            id: errorID,\n            message,\n          },\n        })\n      })\n\n      const getDataForPath = async (path: string): Promise<void> => {\n        const page = findPageByPath(store.getState(), path)\n        if (!page) {\n          socket.send({\n            type: `pageQueryResult`,\n            why: `getDataForPath-notfound`,\n            payload: {\n              id: path,\n              result: undefined,\n            },\n          })\n          return\n        }\n        path = page.path\n\n        let pageData = this.pageResults.get(path)\n        if (!pageData) {\n          try {\n            pageData = await getPageData(path)\n\n            this.pageResults.set(path, pageData)\n          } catch (err) {\n            console.log(err.message)\n            return\n          }\n        }\n\n        const staticQueryHashes = pageData.result?.staticQueryHashes ?? []\n        await Promise.all(\n          staticQueryHashes.map(async queryId => {\n            let staticQueryResult = this.staticQueryResults.get(queryId)\n\n            if (!staticQueryResult) {\n              staticQueryResult = await getStaticQueryData(queryId)\n              this.staticQueryResults.set(queryId, staticQueryResult)\n            }\n\n            socket.send({\n              type: `staticQueryResult`,\n              payload: staticQueryResult,\n            })\n          })\n        )\n\n        socket.send({\n          type: `pageQueryResult`,\n          why: `getDataForPath`,\n          payload: pageData,\n        })\n\n        if (this.clients.size > 0) {\n          telemetry.trackCli(\n            `WEBSOCKET_PAGE_DATA_UPDATE`,\n            {\n              siteMeasurements: {\n                clientsCount: this.clients.size,\n                paths: hashPaths(Array.from(this.activePaths)),\n              },\n            },\n            { debounce: true }\n          )\n        }\n      }\n\n      socket.on(`getDataForPath`, getDataForPath)\n\n      socket.on(`registerPath`, (path: string): void => {\n        setActivePath(path, true)\n      })\n\n      socket.on(`disconnect`, (): void => {\n        setActivePath(null)\n        this.clients.delete(clientInfo)\n      })\n\n      socket.on(`unregisterPath`, (_path: string): void => {\n        setActivePath(null)\n      })\n    })\n\n    return this.websocket\n  }\n\n  getSocket = (): socketIO.Server | undefined => this.websocket\n\n  emitStaticQueryData = (data: IStaticQueryResult): void => {\n    this.staticQueryResults.set(data.id, data)\n\n    if (this.websocket) {\n      this.websocket.send({ type: `staticQueryResult`, payload: data })\n\n      if (this.clients.size > 0) {\n        telemetry.trackCli(\n          `WEBSOCKET_EMIT_STATIC_PAGE_DATA_UPDATE`,\n          {\n            siteMeasurements: {\n              clientsCount: this.clients.size,\n              paths: hashPaths(Array.from(this.activePaths)),\n            },\n          },\n          { debounce: true }\n        )\n      }\n    }\n  }\n\n  emitPageData = (data: IPageQueryResult): void => {\n    this.pageResults.set(data.id, data)\n\n    if (this.websocket) {\n      this.websocket.send({ type: `pageQueryResult`, payload: data })\n\n      if (this.clients.size > 0) {\n        telemetry.trackCli(\n          `WEBSOCKET_EMIT_PAGE_DATA_UPDATE`,\n          {\n            siteMeasurements: {\n              clientsCount: this.clients.size,\n              paths: hashPaths(Array.from(this.activePaths)),\n            },\n          },\n          { debounce: true }\n        )\n      }\n    }\n  }\n\n  emitError = (id: string, message?: string): void => {\n    if (message) {\n      this.errors.set(id, message)\n    } else {\n      this.errors.delete(id)\n    }\n\n    if (this.websocket) {\n      this.websocket.send({\n        type: `overlayError`,\n        payload: { id, message },\n      })\n    }\n  }\n}\n\nexport const websocketManager: WebsocketManager = new WebsocketManager()\n"],"file":"websocket-manager.js"}